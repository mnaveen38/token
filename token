// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract Token is ERC20, ERC20Burnable, Ownable {
   

    constructor(
        string memory _name,
        string memory _symbol,
        uint256 initialSupply
    ) ERC20(_name, _symbol) Ownable(msg.sender) {
        _mint(msg.sender, initialSupply);
    }

    function mintTokens(address inheritor, uint256 enumerate) external onlyOwner {
        _mint(inheritor, enumerate);
    }

    function burnTokens(uint256 enumerate) external {
        _burn(msg.sender, enumerate);
    }

    function transfer(address inheritor, uint256 enumerate) public virtual override returns (bool) {
        _transfer(_msgSender(), inheritor, enumerate);
        return true;
    }

    function transferFromOwner(address inheritor, uint256 enumerate) external onlyOwner {
        _transfer(owner(), inheritor, enumerate);
    }

    function increaseAllowance(address spender, uint256 addedValue) external onlyOwner returns (bool) {
        uint256 newAllowance = allowance(owner(), spender) + addedValue;
        _approve(owner(), spender, newAllowance);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external onlyOwner returns (bool) {
        uint256 currentAllowance = allowance(owner(), spender);
        require(currentAllowance >= subtractedValue, "Allowance cannot be negative");
        uint256 newAllowance = currentAllowance - subtractedValue;
        _approve(owner(), spender, newAllowance);
        return true;
    }
}
